version: "3.3"
services:

  proxy:
    image: '${DOCKER_IMAGE_REVESER_PROXY?Variable not set}:${TAG-latest}'
    build:
      context: .
      dockerfile: ./compose/traefik/Dockerfile
    depends_on:
      - db
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
      # - "8090:8080"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    volumes:
      - production_traefik:/etc/traefik/acme:z



  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.app-db-data == true

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    depends_on:
      - db
    env_file:
      - .env


  
  backend_api_gateway:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    command: /start-reload.sh
    build:
      context: ./backend_api_gateway
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}

  
  backend_metrics:
    image: '${DOCKER_IMAGE_BACKEND_METRICS?Variable not set}:${TAG-latest}'
    depends_on:
      - db
    build:
      context: ./backend_metrics
    command: "gunicorn -b 0.0.0.0:${METRICS_PORT-5000} metrics.wsgi:app"
    
  
  workspace_service:
    env_file:
      - ./workspace-service/.env
    depends_on:
      - db
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    build: 
      context: ./workspace-service
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}

volumes:
  app-db-data: {}
  production_traefik: {}

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
